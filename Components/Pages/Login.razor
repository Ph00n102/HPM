@page "/login"
@using HPM.Data.Entities
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@if (_isProcessing)
{
    <div class="overlay position-fixed"></div>
    <div class="loading-wrapper position-fixed d-flex justify-content-center align-items-center">
        <div class="loading-text fs-1 text-white">Logging-in....</div>
    </div>
} 
<style type="text/css">
    .overlay {
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: black;
        opacity: 0.5;
        z-index: 2000 
    }
    .loading-wrapper {
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        z-index: 2001
    }
</style>

<EditForm Model="_model" OnValidSubmit="LoginAsync">
<DataAnnotationsValidator />
    <div class="container mt-5 d-flex justify-content-center">
        <div class="card" style="width: 450px">
            <div class="card-header">
                <h2>Loging</h2>
            </div>
            <div class="card-body">
                <div class ="mb-3">
                    <label class="form-label">Username</label>
                    <InputText @bind-Value="_model.UserName" class="form-control" placeholder="Enter Username" />
                    <ValidationMessage For="()=> _model.UserName" />
                </div>
                  <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText typeof="password" @bind-Value="_model.Password" class="form-control" placeholder="Enter Password" />
                    <ValidationMessage For="()=> _model.Password" />
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class ="btn btn-success bth-sm">Login</button>
            </div>
        </div>
    </div>
</EditForm>
@code {
    private Authentication _model = new();

    private bool _isProcessing = false;

     private async Task LoginAsync()
    {
        _isProcessing = true;
        try
        {
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _isProcessing = false;
        }
    }  
}


