@page "/login"
@using HPM.Data.Entities
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@if (_isProcessing)
{
    <div class="overlay position-fixed"></div>
    <div class="loading-wrapper position-fixed d-flex justify-content-center align-items-center">
        <div class="loading-text fs-1 text-white">Logging-in....</div>
    </div>
} 
<style type="text/css">
    .overlay {
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background-color: black;
        opacity: 0.5;
        z-index: 2000 
    }
    .loading-wrapper {
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        z-index: 2001
    }
    .wrapper{
        width: 450px;
        background: transparent;
        border: 2px solid rgba(255, 255, 255, .2);
        backdrop-filter: blur(40px);
        color: #000000;
        border-radius: 30px;
        padding: 30px 30px;
    }
    .wrapper h3{
        font-size: 36;
        text-align: center;
    }
    .wrapper .input-box{
        width: 100%;
        height: 40px;
        margin: 10px 10px;
    }
    .cen{
        width: 100%;
        height: 50px;
        margin: 10px 40px;
    }
    .input-box input{
        width: 300px;
        height: 10%;
        background: transparent;
        border: none;
        outline: none;
        border: 2px solid rgba(0, 0, 0, 0.2);
        border-radius: 40px;
        font-size: 16px;
        color: #000000;
        padding: 20px 50px 20px 35px;
        margin-left: auto;
        margin-right: auto;
    }
    .input-box input::placeholder{
        color: #000000;
    }
    .input-box i1 {
        position: absolute;
        right: 20px;
        top: 415px;
        transform: translateX(-790px);
        font-size: 20px;
    }
    .input-box i2 {
        position: absolute;
        right: 20px;
        top: 475px;
        transform: translateX(-790px);
        font-size: 20px;
    }
    .wrapper .btn {
        width: 40%;
        height: 40px;
        background: #fff;
        border: none;
        outline: none;
        border-radius: 40px; @*ทำให้มุมมน*@
        box-shadow: 0 0 10px rgba(0, 0, 0, .1);
        cursor: pointer;
        color: #000000;
        font-weight: 600;
        display: block;
        margin-left: auto;
        margin-right: auto;
        background-image: linear-gradient(180deg, #1BB67A 0%, #59E3AC 70%);
    }
    .center {
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
    .backgroundP1 {
        background-image: url('images/P1.jpg');
        /* background: yellow; */
        background-repeat: no-repeat;
        background-position: center;
        background-attachment: fixed;
        background-size: cover;
        @* max-width: 100%; *@
        width: 1700px;
        height: 675px;
        opacity: 0.6;
        @* background-size: 100% 100%; *@
    }
    .grid{
        margin-bottom: 3rem;
        display: grid;
        grid-template-columns: repeat(auto-fit,minmax(200px, 1fr)); @*1fr คือให้คำนวณพื้นที่ auto*@
    }
</style>
<br />
<br />
<br />
@* <body class="backgroundP1"> *@
<EditForm Model="_model" OnValidSubmit="LoginAsync">
<DataAnnotationsValidator />
<div >
    <div class="container mt-5 d-flex justify-content-center  grid">
        <div class="wrapper" >
            <div class="card-header">
                <h3>LOGIN</h3>
            </div>
            <div class="card-body">
                <div class="input-box">
                    @* <label class="form-label">Username</label> *@
                    <InputText @bind-Value="_model.UserName" class="form-control" placeholder="Enter Username" />
                </div>
                  <div class="input-box">
                    @* <label class="form-label">Password</label> *@
                    <InputText typeof="password" @bind-Value="_model.Password" class="form-control" placeholder="Enter Password" />
                    <ValidationMessage For="()=> _model.UserName" />
                    <ValidationMessage For="()=> _model.Password" />
                </div>
            </div>
            <br />
            <div class="card-footer">
                <button type="submit" class ="btn btn-success bth-sm">Login</button>
            </div>
          
        </div>
    </div>
</div>    
</EditForm>
@* </body> *@
@* <div class="content background-image">
    <div class="bod">
        <div class="wrapper">
            <form action="">
                <h3 class="cen">SKN</h3> 
                <div class="center">
                    <img src="Images/P2.png" width = "150" height = "150" class="center"/> 
                </div>
                <div class="input-box"> *@
                    @* <i1 class='bx bxs-user'></i1> *@
                    @* <input type="text" class="form-control" id="UserName" placeholder="USERNANE" name="UserName"> *@
                @* </div>
                <div class="input-box"> *@
                    @* <i2 class='bx bxs-lock-alt'></i2> *@
                    @* <input type="text" class="form-control" id="Password" placeholder="PASSWORD" name="Password">
                </div>
                <div class="input-box"> *@
                    @* <Button Color="ButtonColor.Secondary" Outline="true" @onclick="button_click" Size="Size.Medium"> Login </Button> *@
                @* </div>
            </form>
        </div>
    </div>
</div> *@

@code {
    private Authentication _model = new();

    private bool _isProcessing = false;

     private async Task LoginAsync()
    {
        _isProcessing = true;
        try
        {
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _isProcessing = false;
        }
    }  
}


